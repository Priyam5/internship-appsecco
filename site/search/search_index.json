{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Project Title: DevSecOps | Strategey, Implimentation Author: Priyam Singh Mentor: Akash Mahajan , Sunesh Govindaraj , Ayush Priya The report documents the tasks I am working and practicing as a part of my internship at Appsecco to implement DevSecOps as well as the issues I am facing while working, and how I resolved them.","title":"Introduction"},{"location":"#introduction","text":"Project Title: DevSecOps | Strategey, Implimentation Author: Priyam Singh Mentor: Akash Mahajan , Sunesh Govindaraj , Ayush Priya The report documents the tasks I am working and practicing as a part of my internship at Appsecco to implement DevSecOps as well as the issues I am facing while working, and how I resolved them.","title":"Introduction"},{"location":"Jenkins-installation/","text":"Jenkins Installation Objective This section aims to set up the required infrastructure of Jenkins to perform the task and solve the 2nd point of the problem statement under Task 1. What is Jenkins? Jenkins is a self-contained, open-source automation server that can be used to automate all sorts of tasks related to building, testing ,and delivering or deploying software . Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed. Prerequisite VM should be installed with Ubuntu 18.04 server for Installing Jenkins go to Debian/Ubuntu section. Java 8 to be installed, by this link specific versions of OpenJDK on Ubuntu 18.04. I decided to go with this documentation as it was concise. Begin with the installation steps of Jenkins. STEP 1 - Installing Jenkins First, add the repository key to the system: wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - The system will return OK Next, append the Debian package repository address sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \\ /etc/apt/sources.list.d/jenkins.list' sudo apt update Finally, install Jenkins and its dependencies: sudo apt install jenkins Step 2 \u2014 Starting Jenkins I started Jenkins using systemctl command because systemctl is used to examine and control the state of \u201csystemd\u201d system and service manager.: sudo systemctl start jenkins Since systemctl doesn\u2019t display output,I am using its status command to verify that Jenkins started successfully: sudo systemctl status jenkins If it's successfully installed, the beginning of the output should show that the service is active and configured to start for boot. Jenkins is running now. To reach it from a web browser I will adjust the firewall rules to complete the initial setup. Step 3 - Opening the Firewall By default, Jenkins runs on port 8080, opening that port using ufw(Uncomplicated Firewall ): sudo ufw allow 8080 To check the ufw's status confirm the new rules: sudo ufw status Note: If the status shows inactive. Then enable the firewall by following the following commands that will OpenSSH sudo ufw allow OpenSSH sudo ufw enable Step 4 \u2014 Setting Up Jenkins Find the IP of your system: ifconfig To complete setup, in the browser I entered http://your_server_ip_or_domain:8080 The Unlock Jenkins screen opens, which will display where the initial password would be stored. In the terminal window I will use the cat command to display the password: sudo cat /var/lib/jenkins/secrets/initialAdminPassword The 32-character alphanumeric password is displayed in the terminal, paste it into the Administrator password field, then click Continue . Installing suggested plugins I clicked the Install suggested plugins option, which will immediately begin the installation process as shown: Once the installation completes, the screen opens to Create First Admin User , I filled the required details. Click on Save and Continue or select Continue as admin to skip the above step and continue as admin using the initial password used above. The Instance Configuration page will be displayed which will ask to confirm the preferred URL for Jenkins instance. Confirm the appropriate information, click Save and Finish . A confirmation page confirming that Jenkins is Ready! Click Start using Jenkins to visit the main Jenkins dashboard. Here finish the installation of Jenkins in VM. Errors resolved There were a few errors that I faced during the installation. GPG key error: An LTS (Long-Term Support) release is chosen every 12 weeks from the stream of regular releases as the stable release for that period time. The link gets updated, it gives GPG key error so find the latest link from here under the Debian/Ubuntu section. Certificate verification failed To resolve this pass --no-check-certificate as shown below: wget https://ftp.yz.yamagata-u.sc.jp/pub/misc/jenkins/debian-stable/jenkins_2.235_all.deb --no-check-certificate Again reinstall the Debian file of Jenkins sudo dpkg -i jenkins_2.235.5_all.deb To fix the broken packages run: sudo apt install -f Now again I check the status of jenkins: sudo service jenkins status It SHOWS its active now. Invalid user or password Once logged in successfully into Jenkins VM (Virtual Machine). Go to directory Jenkins and open file config.xml . sudo nano /var/lib/Jenkins/config.xml This command will open config.xml file as below: Go to tag and check value, it will be true . You need to update tag value to false as below. Save this file. Once you are done with updating value in the config.xml file. Restart Jenkin's service. sudo service jenkins restart It will show the status active . Now on opening Jenkins URL. It will go to the dashboard direct. No credentials are required. After opening the dashboard Logged in user section will be blank. As it is now Anonymous user . To reset all security options, go to Jenkins -> Manage Jenkins option in left-hand side option lists. Go to the Configure Global Security option Enable Enable Security option. In Security Realm Option Select Jenkins own database option. Unselect Allow users to sign up option under Jenkins own database option. In Authorization section do the following changes : Select Logged-in users can do anything option (Tick). Unselect Allow anonymous read access option under Logged-in users can do anything option. Click Save button. You will be redirected to Create First Admin User page once you click on Save button. Once you fill all the details, click on Create First Admin User button You will be ready with new Admin users to log in again into the Jenkins portal.","title":"Setup of Jenkins"},{"location":"Jenkins-installation/#jenkins-installation","text":"","title":"Jenkins Installation"},{"location":"Jenkins-installation/#objective","text":"This section aims to set up the required infrastructure of Jenkins to perform the task and solve the 2nd point of the problem statement under Task 1. What is Jenkins? Jenkins is a self-contained, open-source automation server that can be used to automate all sorts of tasks related to building, testing ,and delivering or deploying software . Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.","title":"Objective"},{"location":"Jenkins-installation/#prerequisite","text":"VM should be installed with Ubuntu 18.04 server for Installing Jenkins go to Debian/Ubuntu section. Java 8 to be installed, by this link specific versions of OpenJDK on Ubuntu 18.04. I decided to go with this documentation as it was concise. Begin with the installation steps of Jenkins.","title":"Prerequisite"},{"location":"Jenkins-installation/#step-1-installing-jenkins","text":"First, add the repository key to the system: wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - The system will return OK Next, append the Debian package repository address sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \\ /etc/apt/sources.list.d/jenkins.list' sudo apt update Finally, install Jenkins and its dependencies: sudo apt install jenkins","title":"STEP 1 - Installing Jenkins"},{"location":"Jenkins-installation/#step-2-starting-jenkins","text":"I started Jenkins using systemctl command because systemctl is used to examine and control the state of \u201csystemd\u201d system and service manager.: sudo systemctl start jenkins Since systemctl doesn\u2019t display output,I am using its status command to verify that Jenkins started successfully: sudo systemctl status jenkins If it's successfully installed, the beginning of the output should show that the service is active and configured to start for boot. Jenkins is running now. To reach it from a web browser I will adjust the firewall rules to complete the initial setup.","title":"Step 2 \u2014 Starting Jenkins"},{"location":"Jenkins-installation/#step-3-opening-the-firewall","text":"By default, Jenkins runs on port 8080, opening that port using ufw(Uncomplicated Firewall ): sudo ufw allow 8080 To check the ufw's status confirm the new rules: sudo ufw status Note: If the status shows inactive. Then enable the firewall by following the following commands that will OpenSSH sudo ufw allow OpenSSH sudo ufw enable","title":"Step 3 - Opening the Firewall"},{"location":"Jenkins-installation/#step-4-setting-up-jenkins","text":"Find the IP of your system: ifconfig To complete setup, in the browser I entered http://your_server_ip_or_domain:8080 The Unlock Jenkins screen opens, which will display where the initial password would be stored. In the terminal window I will use the cat command to display the password: sudo cat /var/lib/jenkins/secrets/initialAdminPassword The 32-character alphanumeric password is displayed in the terminal, paste it into the Administrator password field, then click Continue . Installing suggested plugins I clicked the Install suggested plugins option, which will immediately begin the installation process as shown: Once the installation completes, the screen opens to Create First Admin User , I filled the required details. Click on Save and Continue or select Continue as admin to skip the above step and continue as admin using the initial password used above. The Instance Configuration page will be displayed which will ask to confirm the preferred URL for Jenkins instance. Confirm the appropriate information, click Save and Finish . A confirmation page confirming that Jenkins is Ready! Click Start using Jenkins to visit the main Jenkins dashboard. Here finish the installation of Jenkins in VM.","title":"Step 4 \u2014 Setting Up Jenkins"},{"location":"Jenkins-installation/#errors-resolved","text":"There were a few errors that I faced during the installation. GPG key error: An LTS (Long-Term Support) release is chosen every 12 weeks from the stream of regular releases as the stable release for that period time. The link gets updated, it gives GPG key error so find the latest link from here under the Debian/Ubuntu section. Certificate verification failed To resolve this pass --no-check-certificate as shown below: wget https://ftp.yz.yamagata-u.sc.jp/pub/misc/jenkins/debian-stable/jenkins_2.235_all.deb --no-check-certificate Again reinstall the Debian file of Jenkins sudo dpkg -i jenkins_2.235.5_all.deb To fix the broken packages run: sudo apt install -f Now again I check the status of jenkins: sudo service jenkins status It SHOWS its active now. Invalid user or password Once logged in successfully into Jenkins VM (Virtual Machine). Go to directory Jenkins and open file config.xml . sudo nano /var/lib/Jenkins/config.xml This command will open config.xml file as below: Go to tag and check value, it will be true . You need to update tag value to false as below. Save this file. Once you are done with updating value in the config.xml file. Restart Jenkin's service. sudo service jenkins restart It will show the status active . Now on opening Jenkins URL. It will go to the dashboard direct. No credentials are required. After opening the dashboard Logged in user section will be blank. As it is now Anonymous user . To reset all security options, go to Jenkins -> Manage Jenkins option in left-hand side option lists. Go to the Configure Global Security option Enable Enable Security option. In Security Realm Option Select Jenkins own database option. Unselect Allow users to sign up option under Jenkins own database option. In Authorization section do the following changes : Select Logged-in users can do anything option (Tick). Unselect Allow anonymous read access option under Logged-in users can do anything option. Click Save button. You will be redirected to Create First Admin User page once you click on Save button. Once you fill all the details, click on Create First Admin User button You will be ready with new Admin users to log in again into the Jenkins portal.","title":"Errors resolved"},{"location":"Ubuntu-server-VM-setup/","text":"Setting up VM Objective This section aims to set up the required infrastructure to perform the task and solve the 1st point of the problem statement under Task 1. In this section I will be setting up two VMs: 1. For Jenkin's deployment. 2. For the production server to deploy the application (Odoo) on the server Steps for creating VM: Click on the NEW icon to create a new machine. Create Virtual Machine window will open as shown in the picture. Configure * The Name Jenkins-infra. * The Type to Linux. * Version to Ubuntu (64-bit). * Allocate memory size. Click on Create. Create Virtual Hard Disk will open. Allocate the memory. We will be setting the disk type to VDI Select storage on physical hard disk Dynamically allocated . Click create. And that\u2019s it! Your VM is ready for Ubuntu 18.04 server installation. TO download the server image 18.04 on VirtualBox as it is an LTS (Long Term Support) version which is a desirable feature for a CI pipeline. Follow the link What is LTS? It is a product lifecycle management policy in which a stable release of computer software is maintained for a longer period than the standard edition. The term is typically reserved for open-source software. Installation steps for Ubuntu Server 18.04 I decided to install the Ubuntu Server 18.04 because my system was not able to support the Desktop Image. In the VM box, I selected the VM to install the server. Click on Start When the window Select start-up disk window opens click on the folder. A new window opens Optical Disk Selector . Select the server image and click Choose Server image is now selected and click on Start Click on Start Jenkins VM start's running. The installer is designed to be easy to use and have sensible defaults so for a first install you can mostly just accept the defaults for the most straightforward install. Beginning with installation: Language selection This screen selects the language and the default language for the installed system. Press the Enter button. Keyboard configuration By default, the English (US) layout and variant keyboard is selected. Press the Enter button. Network Configuration of the network is done from here and leave it to default if no changes. Select Done and press Enter . Configure proxy The proxy configured on this screen is used for accessing the package repository and the snap store both in the installer environment and in the installed system. Mirror The installer will attempt to use GeoIP to lookup an appropriate default package mirror for location. Guided Storage Configuration I kept the storage default and selected Done . Press the Enter button. Storage Configuration Confirm storage configuration. Select continue. Press Enter to begin the installation. Profile Setup Fill the required details. Select Done and press the Enter button. SSH Select the option Install OpenSSH server because by default Ubuntu does not have an SSH server installed. It has only an SSH client installed. It is very common practice for administrators to SSH into the Ubuntu server so it's better to install the OpenSSH server here only with one click of a button. Select Done and press the Enter button. Snaps If a network connection is enabled, a selection of snaps that are useful in a server environment is presented and can be selected for installation. After that, select Done and press Enter . Installation logs Once the installation is complete, select Reboot . Press Enter . Similarly, the second VM can be installed. Here I finished with the installation of Ubuntu 18.04(LTS) server.","title":"Setup of VMs"},{"location":"Ubuntu-server-VM-setup/#setting-up-vm","text":"","title":"Setting up VM"},{"location":"Ubuntu-server-VM-setup/#objective","text":"This section aims to set up the required infrastructure to perform the task and solve the 1st point of the problem statement under Task 1. In this section I will be setting up two VMs: 1. For Jenkin's deployment. 2. For the production server to deploy the application (Odoo) on the server","title":"Objective"},{"location":"Ubuntu-server-VM-setup/#steps-for-creating-vm","text":"Click on the NEW icon to create a new machine. Create Virtual Machine window will open as shown in the picture. Configure * The Name Jenkins-infra. * The Type to Linux. * Version to Ubuntu (64-bit). * Allocate memory size. Click on Create. Create Virtual Hard Disk will open. Allocate the memory. We will be setting the disk type to VDI Select storage on physical hard disk Dynamically allocated . Click create. And that\u2019s it! Your VM is ready for Ubuntu 18.04 server installation. TO download the server image 18.04 on VirtualBox as it is an LTS (Long Term Support) version which is a desirable feature for a CI pipeline. Follow the link What is LTS? It is a product lifecycle management policy in which a stable release of computer software is maintained for a longer period than the standard edition. The term is typically reserved for open-source software.","title":"Steps for creating VM:"},{"location":"Ubuntu-server-VM-setup/#installation-steps-for-ubuntu-server-1804","text":"I decided to install the Ubuntu Server 18.04 because my system was not able to support the Desktop Image. In the VM box, I selected the VM to install the server. Click on Start When the window Select start-up disk window opens click on the folder. A new window opens Optical Disk Selector . Select the server image and click Choose Server image is now selected and click on Start Click on Start Jenkins VM start's running. The installer is designed to be easy to use and have sensible defaults so for a first install you can mostly just accept the defaults for the most straightforward install. Beginning with installation: Language selection This screen selects the language and the default language for the installed system. Press the Enter button. Keyboard configuration By default, the English (US) layout and variant keyboard is selected. Press the Enter button. Network Configuration of the network is done from here and leave it to default if no changes. Select Done and press Enter . Configure proxy The proxy configured on this screen is used for accessing the package repository and the snap store both in the installer environment and in the installed system. Mirror The installer will attempt to use GeoIP to lookup an appropriate default package mirror for location. Guided Storage Configuration I kept the storage default and selected Done . Press the Enter button. Storage Configuration Confirm storage configuration. Select continue. Press Enter to begin the installation. Profile Setup Fill the required details. Select Done and press the Enter button. SSH Select the option Install OpenSSH server because by default Ubuntu does not have an SSH server installed. It has only an SSH client installed. It is very common practice for administrators to SSH into the Ubuntu server so it's better to install the OpenSSH server here only with one click of a button. Select Done and press the Enter button. Snaps If a network connection is enabled, a selection of snaps that are useful in a server environment is presented and can be selected for installation. After that, select Done and press Enter . Installation logs Once the installation is complete, select Reboot . Press Enter . Similarly, the second VM can be installed. Here I finished with the installation of Ubuntu 18.04(LTS) server.","title":"Installation steps for Ubuntu Server 18.04"},{"location":"Workflow/","text":"\u2610 1. Fetch the source code from (Git and GitHub) \u2610 1.1 Clone the repository in Jenkins VM \u2610 2. Install the Packages of the application code \u2610 3. Building the pipeline \u2610 4. Moving the stuff from jenkins pipeline to production VM by doing SSH \u2610 5. Run the application in the production VM from Jenkins Pipeline \u2610 6. Update Documentation","title":"Workflow"},{"location":"contents/","text":"Table of contents The following is the report/documentation for the Problem Statement stated in next section. The contents of the report are: Introduction Contents Problem Statement Setup of VMS Setup of Jenkins MkDocs setup for report Setting Up Pipeline","title":"Contents"},{"location":"contents/#table-of-contents","text":"The following is the report/documentation for the Problem Statement stated in next section. The contents of the report are: Introduction Contents Problem Statement Setup of VMS Setup of Jenkins MkDocs setup for report Setting Up Pipeline","title":"Table of contents"},{"location":"mkdocs-setup-usage/","text":"MkDocs setup for Report Objective This section aims to create documentation in Markdown and use MkDocs to deploy the documentation generated as a static site about the 3rd point of the problem statement under Task 1. MkDocs is a fast, simple, and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Installing MkDocs MkDocs can be installed from this link as it is the official site. I only referred to the 'Installing MkDocs' section under 'Manual Installation' Selecting a Theme MkDocs allows users to use various themes to customize the style and look of the site. I saw the various themes provided from here . I selected the 'Material' theme because I liked the style the way content is displayed. To use this theme with MkDocs, it is required to be installed with pip so, I installed Material theme using the command pip install mkdocs-material ' as mentioned in the official documentation. Getting started with Configuration In the terminal: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created in the vscode. A single configuration file named mkdocs.yml, and a folder named docs that will contain documentation source files. The docs folder just contains a single documentation page, named index.md. MkDocs comes with a built-in dev-server to preview the documentation as we work on it. Start the server in the same directory as the mkdocs.yml configuration file, by running the MkDocs serve command: I opened http://127.0.0.1:8000/ in the browser, and saw the default home page is displayed: YAML file mkdocs.yml , be present in the root directory of the project that configures the site structure, site title, pages, themes, etc. It is used to define properties for the site. Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file. My : site_name: <DevSecOps> nav: - Introduction: 'index.md' - Contents: 'contents.md' - Problem Statement: 'problem-statement.md' - Setup of VMs: 'Ubuntu-server-VM-setup.md' - Setup of Jenkins: 'Jenkins-installation.md' - MkDocs setup for report: 'mkdocs-setup-usage.md' theme: material site_name: title of the site nav: To add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting. theme: The theme we are using. Deploying the site on GitHub Made a repository on GitHub internship-appsecco and also check the option Initialize this repository with a README and private repository and select Create repository Now in the terminal run: git init mkdocs build git add . git commit -m \"demo1\" git push -u origin master I can see that the file is pushed on GitHub To build the site folder we will run mkdocs build --clean Deploying on Netlify from Github I deployed the site on Github because every time I make the changes I just have to push it to GitHub and from there the report will be live. Select the option Add new site . Next select option Git it will start showing all repositories. Select the appsecco-internship repository and then in Publish directory column type site/ Click on deploy site. The site will be deployed now and the link will be available on the screen.","title":"MkDocs setup for report"},{"location":"mkdocs-setup-usage/#mkdocs-setup-for-report","text":"","title":"MkDocs setup for Report"},{"location":"mkdocs-setup-usage/#objective","text":"This section aims to create documentation in Markdown and use MkDocs to deploy the documentation generated as a static site about the 3rd point of the problem statement under Task 1. MkDocs is a fast, simple, and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.","title":"Objective"},{"location":"mkdocs-setup-usage/#installing-mkdocs","text":"MkDocs can be installed from this link as it is the official site. I only referred to the 'Installing MkDocs' section under 'Manual Installation'","title":"Installing MkDocs"},{"location":"mkdocs-setup-usage/#selecting-a-theme","text":"MkDocs allows users to use various themes to customize the style and look of the site. I saw the various themes provided from here . I selected the 'Material' theme because I liked the style the way content is displayed. To use this theme with MkDocs, it is required to be installed with pip so, I installed Material theme using the command pip install mkdocs-material ' as mentioned in the official documentation.","title":"Selecting a Theme"},{"location":"mkdocs-setup-usage/#getting-started-with-configuration","text":"In the terminal: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created in the vscode. A single configuration file named mkdocs.yml, and a folder named docs that will contain documentation source files. The docs folder just contains a single documentation page, named index.md. MkDocs comes with a built-in dev-server to preview the documentation as we work on it. Start the server in the same directory as the mkdocs.yml configuration file, by running the MkDocs serve command: I opened http://127.0.0.1:8000/ in the browser, and saw the default home page is displayed: YAML file mkdocs.yml , be present in the root directory of the project that configures the site structure, site title, pages, themes, etc. It is used to define properties for the site. Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file. My : site_name: <DevSecOps> nav: - Introduction: 'index.md' - Contents: 'contents.md' - Problem Statement: 'problem-statement.md' - Setup of VMs: 'Ubuntu-server-VM-setup.md' - Setup of Jenkins: 'Jenkins-installation.md' - MkDocs setup for report: 'mkdocs-setup-usage.md' theme: material site_name: title of the site nav: To add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting. theme: The theme we are using.","title":"Getting started with Configuration"},{"location":"mkdocs-setup-usage/#deploying-the-site-on-github","text":"Made a repository on GitHub internship-appsecco and also check the option Initialize this repository with a README and private repository and select Create repository Now in the terminal run: git init mkdocs build git add . git commit -m \"demo1\" git push -u origin master I can see that the file is pushed on GitHub To build the site folder we will run mkdocs build --clean","title":"Deploying the site on GitHub"},{"location":"mkdocs-setup-usage/#deploying-on-netlify-from-github","text":"I deployed the site on Github because every time I make the changes I just have to push it to GitHub and from there the report will be live. Select the option Add new site . Next select option Git it will start showing all repositories. Select the appsecco-internship repository and then in Publish directory column type site/ Click on deploy site. The site will be deployed now and the link will be available on the screen.","title":"Deploying on Netlify from Github"},{"location":"problem-statement/","text":"Problem Statement Task 1 Setup the infrastructure, required for the task, on 2 virtual machines running locally on a laptop. One VM contains the Jenkins and related infrastructure, and the second VM is for deploying the Odoo using the pipeline. Setup the infrastructure, of Jenkins for basic pipeline setup. Do document extensively in markdown and deploy the documentation in a MkDocs website. Setting up the basic pipeline. Next, Odoo should get deployed in a server that is the second VM we installed.","title":"Problem Statement"},{"location":"problem-statement/#problem-statement","text":"","title":"Problem Statement"},{"location":"problem-statement/#task-1","text":"Setup the infrastructure, required for the task, on 2 virtual machines running locally on a laptop. One VM contains the Jenkins and related infrastructure, and the second VM is for deploying the Odoo using the pipeline. Setup the infrastructure, of Jenkins for basic pipeline setup. Do document extensively in markdown and deploy the documentation in a MkDocs website. Setting up the basic pipeline. Next, Odoo should get deployed in a server that is the second VM we installed.","title":"Task 1"},{"location":"setting-up-pipeline/","text":"Setting up a pipeline: Objective This section aims to set up a basic pipeline in Jenkins to perform the task and solve the 4th point of the problem statement under Task 1. Why Pipeline? Jenkins is, fundamentally, an automation engine that supports several automation patterns. Pipeline adds a powerful set of automation tools onto Jenkins, supporting use cases that span from simple continuous integration to comprehensive CD pipelines. By modeling a series of related tasks, Pipeline has many features: Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit, review, and iterate upon their delivery pipeline. Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins master. Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run. Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel. Extensible: The Pipeline plugin supports custom extensions to its DSL(Domain Specific Language) and multiple options for integration with other plugins. Jenkins pipeline Project I set up the Jenkins as mentioned in the Setup of Jenkins section. So for building a pipeline for Maven project I followed these steps and also downloaded Maven in my Jenkins VM because all the repositories related to it are present in the system: Click on the New Item from the main dashboard which leads to a different page. Filled the project name as Jenkins-Maven and choose Maven Project as the project type as it was a Maven based project. Next came to the project configurations page. Here: Under General section: I gave a description of the application being deployed and the purpose of this pipeline. Under the Source Code Management option I checked the Git option and provided the GitHub URL for the project's repository. This option allowed Jenkins to know where to fetch the project from. Under Build Triggers section: I checked the Build whenever a SNAPSHOT dependency is built option to allow automated builds. I clicked on save to save the configurations. Jenkinsfile Jenkinsfile is defined as a utility where the actions that are to be performed on the build can be written in a syntactical format in a file. I followed this article because it is the official documentation from Jenkins and it is easy to understand because it has a simple format with examples. The following are the contents of the Jenkinsfile which executes the pipeline: pipeline { agent any stages { stage ('Compile Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn clean compile' } } } stage ('Testing Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn test' } } } stage ('Deployment Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn deploy' } } } } } The pipeline block constitutes the entire definition of the pipeline. The agent keyword is used to choose the way the Jenkins instance(s) are used to run the pipeline. The any keyword defines that Jenkins should allocate any available agent (an instance of Jenkins/a slave/the master instance) to execute the pipeline. A more thorough explanation can be found here . The stages block houses all the stages that will comprise the various operations to be performed during the execution of the pipeline. The stage block defines the task performed through the Pipeline (e.g. \"Build\", \"Test\" and \"Deploy\" stages) The steps block defines the actions that are to be performed within a particular stage. sh keyword is used to execute shell commands through Jenkins. Lastly, mvn over here stands for maven. Deploying the files to Production VM For copying the files from Jenkins VM to production VM: scp -i /var/lib/jenkins/workspace/Jenkins-Maven/target production@192.168.1.4:/home/production/target Syntax: scp In this A is Jenkins VM and B is production VM. To copy a file from B to A while logged into B: scp /path/to/file username@a:/path/to/destination To copy a file from B to A while logged into A: scp username@b:/path/to/file /path/to/destination Setup SSH keys I referred to this document of digitalocean as the way it explained is simple to understand. I followed the first three steps because I have to only set up SSH Keys and did not follow the last step.","title":"Setting Up Pipeline"},{"location":"setting-up-pipeline/#setting-up-a-pipeline","text":"","title":"Setting up a pipeline:"},{"location":"setting-up-pipeline/#objective","text":"This section aims to set up a basic pipeline in Jenkins to perform the task and solve the 4th point of the problem statement under Task 1.","title":"Objective"},{"location":"setting-up-pipeline/#why-pipeline","text":"Jenkins is, fundamentally, an automation engine that supports several automation patterns. Pipeline adds a powerful set of automation tools onto Jenkins, supporting use cases that span from simple continuous integration to comprehensive CD pipelines. By modeling a series of related tasks, Pipeline has many features: Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit, review, and iterate upon their delivery pipeline. Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins master. Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run. Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel. Extensible: The Pipeline plugin supports custom extensions to its DSL(Domain Specific Language) and multiple options for integration with other plugins.","title":"Why Pipeline?"},{"location":"setting-up-pipeline/#jenkins-pipeline-project","text":"I set up the Jenkins as mentioned in the Setup of Jenkins section. So for building a pipeline for Maven project I followed these steps and also downloaded Maven in my Jenkins VM because all the repositories related to it are present in the system: Click on the New Item from the main dashboard which leads to a different page. Filled the project name as Jenkins-Maven and choose Maven Project as the project type as it was a Maven based project. Next came to the project configurations page. Here: Under General section: I gave a description of the application being deployed and the purpose of this pipeline. Under the Source Code Management option I checked the Git option and provided the GitHub URL for the project's repository. This option allowed Jenkins to know where to fetch the project from. Under Build Triggers section: I checked the Build whenever a SNAPSHOT dependency is built option to allow automated builds. I clicked on save to save the configurations.","title":"Jenkins pipeline Project"},{"location":"setting-up-pipeline/#jenkinsfile","text":"Jenkinsfile is defined as a utility where the actions that are to be performed on the build can be written in a syntactical format in a file. I followed this article because it is the official documentation from Jenkins and it is easy to understand because it has a simple format with examples. The following are the contents of the Jenkinsfile which executes the pipeline: pipeline { agent any stages { stage ('Compile Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn clean compile' } } } stage ('Testing Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn test' } } } stage ('Deployment Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn deploy' } } } } } The pipeline block constitutes the entire definition of the pipeline. The agent keyword is used to choose the way the Jenkins instance(s) are used to run the pipeline. The any keyword defines that Jenkins should allocate any available agent (an instance of Jenkins/a slave/the master instance) to execute the pipeline. A more thorough explanation can be found here . The stages block houses all the stages that will comprise the various operations to be performed during the execution of the pipeline. The stage block defines the task performed through the Pipeline (e.g. \"Build\", \"Test\" and \"Deploy\" stages) The steps block defines the actions that are to be performed within a particular stage. sh keyword is used to execute shell commands through Jenkins. Lastly, mvn over here stands for maven.","title":"Jenkinsfile"},{"location":"setting-up-pipeline/#deploying-the-files-to-production-vm","text":"For copying the files from Jenkins VM to production VM: scp -i /var/lib/jenkins/workspace/Jenkins-Maven/target production@192.168.1.4:/home/production/target Syntax: scp In this A is Jenkins VM and B is production VM. To copy a file from B to A while logged into B: scp /path/to/file username@a:/path/to/destination To copy a file from B to A while logged into A: scp username@b:/path/to/file /path/to/destination","title":"Deploying the files to Production VM"},{"location":"setting-up-pipeline/#setup-ssh-keys","text":"I referred to this document of digitalocean as the way it explained is simple to understand. I followed the first three steps because I have to only set up SSH Keys and did not follow the last step.","title":"Setup SSH keys"}]}