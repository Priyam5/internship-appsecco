{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Project Title: DevSecOps | Strategey, Implimentation Author: Priyam Singh Mentor: Akash Mahajan , Sunesh Govindaraj , Ayush Priya The report documents the tasks I am working and practicing as a part of my internship at Appsecco to implement DevSecOps as well as the issues I am facing while working, and how I resolved them.","title":"Introduction"},{"location":"#introduction","text":"Project Title: DevSecOps | Strategey, Implimentation Author: Priyam Singh Mentor: Akash Mahajan , Sunesh Govindaraj , Ayush Priya The report documents the tasks I am working and practicing as a part of my internship at Appsecco to implement DevSecOps as well as the issues I am facing while working, and how I resolved them.","title":"Introduction"},{"location":"Jenkins-installation/","text":"Jenkins Installation Objective This section aims to set up the required infrastructure of Jenkins to perform the task and solve the 2nd point of the problem statement under Task 1. What is Jenkins? Jenkins is a self-contained, open-source automation server that can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software. Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed. Prerequisite I installed VM with Ubuntu 18.04 server for Installing Jenkins . I followed the steps under the Debian/Ubuntu section. I also installed Java 8, by this link specific versions of OpenJDK on Ubuntu 18.04. I decided to go with this documentation as it was concise. Installation steps of Jenkins. STEP 1 - Installing Jenkins First, add the repository key to the system: wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - The system will return OK Next, append the Debian package repository address sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \\ /etc/apt/sources.list.d/jenkins.list' sudo apt update Finally, install Jenkins and its dependencies: sudo apt install jenkins Step 2 \u2014 Starting Jenkins I started Jenkins using systemctl command because systemctl is used to examine and control the state of \u201csystemd\u201d system and service manager.: sudo systemctl start jenkins Since systemctl doesn\u2019t display output, I am using its status command to verify that Jenkins started successfully: sudo systemctl status jenkins If it's successfully installed, the beginning of the output should show that the service is active and configured to start for boot. Jenkins is running now. To reach it from a web browser I will adjust the firewall rules to complete the initial setup. Step 3 - Opening the Firewall By default, Jenkins runs on port 8080, opening that port using ufw(Uncomplicated Firewall ): sudo ufw allow 8080 To check the ufw's status confirm the new rules: sudo ufw status Note: If the status shows inactive. Then enable the firewall by following the following commands that will OpenSSH sudo ufw allow OpenSSH sudo ufw enable Step 4 \u2014 Setting Up Jenkins Find the IP of your system: ifconfig To complete setup, in the browser I entered http://your_server_ip_or_domain:8080 The Unlock Jenkins screen opens, which will display where the initial password would be stored. In the terminal window I will use the cat command to display the password: sudo cat /var/lib/jenkins/secrets/initialAdminPassword The 32-character alphanumeric password is displayed in the terminal, paste it into the Administrator password field, then click Continue . Installing suggested plugins I clicked the Install suggested plugins option, which will immediately begin the installation process as shown: Once the installation completes, the screen opens to Create First Admin User , I filled the required details. Click on Save and Continue or select Continue as admin to skip the above step and continue as admin using the initial password used above. The Instance Configuration page will be displayed which will ask to confirm the preferred URL for Jenkins instance. Confirm the appropriate information, click Save and Finish . A confirmation page confirming that Jenkins is Ready! Click Start using Jenkins to visit the main Jenkins dashboard. Here finish the installation of Jenkins in VM. Errors resolved These were errors that I faced during the installation. 1. GPG key error: An LTS (Long-Term Support) release is chosen every 12 weeks from the stream of regular releases as the stable release for that period time. The link gets updated, it gives GPG key error so find the latest link from here under the Debian/Ubuntu section. 2. Certificate verification failed To resolve this pass --no-check-certificate as shown below: wget https://ftp.yz.yamagata-u.sc.jp/pub/misc/jenkins/debian-stable/jenkins_2.235_all.deb --no-check-certificate Again reinstall the Debian file of Jenkins sudo dpkg -i jenkins_2.235.5_all.deb To fix the broken packages run: sudo apt install -f Now again I check the status of jenkins: sudo service jenkins status It SHOWS its active now. 3. Invalid username or password Once logged in successfully into Jenkins VM (Virtual Machine). Go to directory Jenkins and open file config.xml . sudo nano /var/lib/Jenkins/config.xml This command will open config.xml file as below: Go to tag and check value, it will be true . You need to update tag value to false as below. Save this file. Once you are done with updating value in the config.xml file. Restart Jenkin's service. sudo service jenkins restart It will show the status active . Now on opening Jenkins URL. It will go to the dashboard direct. No credentials are required. After opening the dashboard Logged in user section will be blank. As it is now Anonymous user . To reset all security options, go to Jenkins -> Manage Jenkins option in left-hand side option lists. Go to the Configure Global Security option Enable Enable Security option. In Security Realm Option Select Jenkins own database option. Unselect Allow users to sign up option under Jenkins own database option. In Authorization section do the following changes : Select Logged-in users can do anything option (Tick). Unselect Allow anonymous read access option under Logged-in users can do anything option. Click Save button. You will be redirected to Create First Admin User page once you click on Save button. Once you fill all the details, click on Create First Admin User button You will be ready with new Admin users to log in again into the Jenkins portal.","title":"Setup of Jenkins"},{"location":"Jenkins-installation/#jenkins-installation","text":"","title":"Jenkins Installation"},{"location":"Jenkins-installation/#objective","text":"This section aims to set up the required infrastructure of Jenkins to perform the task and solve the 2nd point of the problem statement under Task 1. What is Jenkins? Jenkins is a self-contained, open-source automation server that can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software. Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.","title":"Objective"},{"location":"Jenkins-installation/#prerequisite","text":"I installed VM with Ubuntu 18.04 server for Installing Jenkins . I followed the steps under the Debian/Ubuntu section. I also installed Java 8, by this link specific versions of OpenJDK on Ubuntu 18.04. I decided to go with this documentation as it was concise.","title":"Prerequisite"},{"location":"Jenkins-installation/#installation-steps-of-jenkins","text":"","title":"Installation steps of Jenkins."},{"location":"Jenkins-installation/#step-1-installing-jenkins","text":"First, add the repository key to the system: wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - The system will return OK Next, append the Debian package repository address sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \\ /etc/apt/sources.list.d/jenkins.list' sudo apt update Finally, install Jenkins and its dependencies: sudo apt install jenkins","title":"STEP 1 - Installing Jenkins"},{"location":"Jenkins-installation/#step-2-starting-jenkins","text":"I started Jenkins using systemctl command because systemctl is used to examine and control the state of \u201csystemd\u201d system and service manager.: sudo systemctl start jenkins Since systemctl doesn\u2019t display output, I am using its status command to verify that Jenkins started successfully: sudo systemctl status jenkins If it's successfully installed, the beginning of the output should show that the service is active and configured to start for boot. Jenkins is running now. To reach it from a web browser I will adjust the firewall rules to complete the initial setup.","title":"Step 2 \u2014 Starting Jenkins"},{"location":"Jenkins-installation/#step-3-opening-the-firewall","text":"By default, Jenkins runs on port 8080, opening that port using ufw(Uncomplicated Firewall ): sudo ufw allow 8080 To check the ufw's status confirm the new rules: sudo ufw status Note: If the status shows inactive. Then enable the firewall by following the following commands that will OpenSSH sudo ufw allow OpenSSH sudo ufw enable","title":"Step 3 - Opening the Firewall"},{"location":"Jenkins-installation/#step-4-setting-up-jenkins","text":"Find the IP of your system: ifconfig To complete setup, in the browser I entered http://your_server_ip_or_domain:8080 The Unlock Jenkins screen opens, which will display where the initial password would be stored. In the terminal window I will use the cat command to display the password: sudo cat /var/lib/jenkins/secrets/initialAdminPassword The 32-character alphanumeric password is displayed in the terminal, paste it into the Administrator password field, then click Continue . Installing suggested plugins I clicked the Install suggested plugins option, which will immediately begin the installation process as shown: Once the installation completes, the screen opens to Create First Admin User , I filled the required details. Click on Save and Continue or select Continue as admin to skip the above step and continue as admin using the initial password used above. The Instance Configuration page will be displayed which will ask to confirm the preferred URL for Jenkins instance. Confirm the appropriate information, click Save and Finish . A confirmation page confirming that Jenkins is Ready! Click Start using Jenkins to visit the main Jenkins dashboard. Here finish the installation of Jenkins in VM.","title":"Step 4 \u2014 Setting Up Jenkins"},{"location":"Jenkins-installation/#errors-resolved","text":"These were errors that I faced during the installation.","title":"Errors resolved"},{"location":"Jenkins-installation/#1-gpg-key-error","text":"An LTS (Long-Term Support) release is chosen every 12 weeks from the stream of regular releases as the stable release for that period time. The link gets updated, it gives GPG key error so find the latest link from here under the Debian/Ubuntu section.","title":"1. GPG key error:"},{"location":"Jenkins-installation/#2-certificate-verification-failed","text":"To resolve this pass --no-check-certificate as shown below: wget https://ftp.yz.yamagata-u.sc.jp/pub/misc/jenkins/debian-stable/jenkins_2.235_all.deb --no-check-certificate Again reinstall the Debian file of Jenkins sudo dpkg -i jenkins_2.235.5_all.deb To fix the broken packages run: sudo apt install -f Now again I check the status of jenkins: sudo service jenkins status It SHOWS its active now.","title":"2. Certificate verification failed"},{"location":"Jenkins-installation/#3-invalid-username-or-password","text":"Once logged in successfully into Jenkins VM (Virtual Machine). Go to directory Jenkins and open file config.xml . sudo nano /var/lib/Jenkins/config.xml This command will open config.xml file as below: Go to tag and check value, it will be true . You need to update tag value to false as below. Save this file. Once you are done with updating value in the config.xml file. Restart Jenkin's service. sudo service jenkins restart It will show the status active . Now on opening Jenkins URL. It will go to the dashboard direct. No credentials are required. After opening the dashboard Logged in user section will be blank. As it is now Anonymous user . To reset all security options, go to Jenkins -> Manage Jenkins option in left-hand side option lists. Go to the Configure Global Security option Enable Enable Security option. In Security Realm Option Select Jenkins own database option. Unselect Allow users to sign up option under Jenkins own database option. In Authorization section do the following changes : Select Logged-in users can do anything option (Tick). Unselect Allow anonymous read access option under Logged-in users can do anything option. Click Save button. You will be redirected to Create First Admin User page once you click on Save button. Once you fill all the details, click on Create First Admin User button You will be ready with new Admin users to log in again into the Jenkins portal.","title":"3. Invalid username or password"},{"location":"Ubuntu-server-VM-setup/","text":"Setting up VM Objective This section aims to set up the required infrastructure to perform the task and solve the 1st point of the problem statement under Task 1. In this section, I will be setting up two VMs: For Jenkin's deployment. For the production server to deploy the application (Odoo) on the server Steps for creating VM: Click on the NEW icon to create a new machine. Create Virtual Machine window will open as shown in the picture. Configure: The Name Jenkins-infra. The Type to Linux. Version to Ubuntu (64-bit). Allocate memory size. Click on Create. Create Virtual Hard Disk will open. Allocate the memory. We will be setting the disk type to VDI Select storage on physical hard disk Dynamically allocated . Click create. And that\u2019s it! VM is ready for Ubuntu 18.04 server installation. To download the server image 18.04 on VirtualBox as it is an LTS (Long Term Support) version which is a desirable feature for a CI pipeline. I followed this link because it is the official link. What is LTS? It is a product lifecycle management policy in which a stable release of computer software is maintained for a longer period than the standard edition. The term is typically reserved for open-source software. Installation steps for Ubuntu Server 18.04 I decided to install the Ubuntu Server 18.04 because my system was not able to support the Desktop Image of Ubuntu 18.04 server . In the VM box, I selected the VM < Jenkins-infra > to install the server. Click on Start When the Select start-up disk window opens click on the folder. A new screen opens Optical Disk Selector . Select the server image and clicked the option Choose Server image is now selected and click on Start After clicking on Start Jenkins VM start's running. The installer is designed to be easy to use and have sensible defaults so for a first install I have mostly just accepted the defaults for the most straightforward install. Beginning with installation: Language selection This screen selects the language. The default language for the installed system is selected as English. Press the Enter button. Keyboard configuration By default, the English (US) layout and variant keyboard is selected. Press the Enter button. Network Configuration of the network is done from here and I left it as default because I did not want to do any changes. Select Done and press Enter . Configure proxy The proxy configured on this screen is used for accessing the package repository and the snap store both in the installer environment and in the installed system. I did not provide any Proxy address , kept it default and selected Done Mirror The installer will attempt to use GeoIP to lookup an appropriate default package mirror for location. I kept this too as default and selected Done Guided Storage Configuration I do not have to make any changes to the storage configuration. So I selected Done and pressed the Enter button. Storage Configuration Select Done . I didn't make any changes. Select continue and press Enter to begin the installation. Profile Setup I filled the required details. Select Done and press the Enter button. SSH Select the option Install OpenSSH server because by default Ubuntu does not have an SSH server installed. It has only an SSH client installed. It is very common practice for administrators to SSH into the Ubuntu server so later on, I will also have to SSH to connect the two VM's. It's better to install the OpenSSH server here only with one click of a button. Select Done and press the Enter button. Snaps If a network connection is enabled, a selection of snaps that are useful in a server environment is presented and can be selected for installation. After this, select Done and press Enter . Installation logs Once the installation is complete, select Reboot . Press Enter . Similarly, the second VM can be installed. Here I finished with the installation of Ubuntu 18.04(LTS) server.","title":"Setup of VMs"},{"location":"Ubuntu-server-VM-setup/#setting-up-vm","text":"","title":"Setting up VM"},{"location":"Ubuntu-server-VM-setup/#objective","text":"This section aims to set up the required infrastructure to perform the task and solve the 1st point of the problem statement under Task 1. In this section, I will be setting up two VMs: For Jenkin's deployment. For the production server to deploy the application (Odoo) on the server","title":"Objective"},{"location":"Ubuntu-server-VM-setup/#steps-for-creating-vm","text":"Click on the NEW icon to create a new machine. Create Virtual Machine window will open as shown in the picture. Configure: The Name Jenkins-infra. The Type to Linux. Version to Ubuntu (64-bit). Allocate memory size. Click on Create. Create Virtual Hard Disk will open. Allocate the memory. We will be setting the disk type to VDI Select storage on physical hard disk Dynamically allocated . Click create. And that\u2019s it! VM is ready for Ubuntu 18.04 server installation. To download the server image 18.04 on VirtualBox as it is an LTS (Long Term Support) version which is a desirable feature for a CI pipeline. I followed this link because it is the official link. What is LTS? It is a product lifecycle management policy in which a stable release of computer software is maintained for a longer period than the standard edition. The term is typically reserved for open-source software.","title":"Steps for creating VM:"},{"location":"Ubuntu-server-VM-setup/#installation-steps-for-ubuntu-server-1804","text":"I decided to install the Ubuntu Server 18.04 because my system was not able to support the Desktop Image of Ubuntu 18.04 server . In the VM box, I selected the VM < Jenkins-infra > to install the server. Click on Start When the Select start-up disk window opens click on the folder. A new screen opens Optical Disk Selector . Select the server image and clicked the option Choose Server image is now selected and click on Start After clicking on Start Jenkins VM start's running. The installer is designed to be easy to use and have sensible defaults so for a first install I have mostly just accepted the defaults for the most straightforward install. Beginning with installation: Language selection This screen selects the language. The default language for the installed system is selected as English. Press the Enter button. Keyboard configuration By default, the English (US) layout and variant keyboard is selected. Press the Enter button. Network Configuration of the network is done from here and I left it as default because I did not want to do any changes. Select Done and press Enter . Configure proxy The proxy configured on this screen is used for accessing the package repository and the snap store both in the installer environment and in the installed system. I did not provide any Proxy address , kept it default and selected Done Mirror The installer will attempt to use GeoIP to lookup an appropriate default package mirror for location. I kept this too as default and selected Done Guided Storage Configuration I do not have to make any changes to the storage configuration. So I selected Done and pressed the Enter button. Storage Configuration Select Done . I didn't make any changes. Select continue and press Enter to begin the installation. Profile Setup I filled the required details. Select Done and press the Enter button. SSH Select the option Install OpenSSH server because by default Ubuntu does not have an SSH server installed. It has only an SSH client installed. It is very common practice for administrators to SSH into the Ubuntu server so later on, I will also have to SSH to connect the two VM's. It's better to install the OpenSSH server here only with one click of a button. Select Done and press the Enter button. Snaps If a network connection is enabled, a selection of snaps that are useful in a server environment is presented and can be selected for installation. After this, select Done and press Enter . Installation logs Once the installation is complete, select Reboot . Press Enter . Similarly, the second VM can be installed. Here I finished with the installation of Ubuntu 18.04(LTS) server.","title":"Installation steps for Ubuntu Server 18.04"},{"location":"contents/","text":"Table of contents The following is the report/documentation for the Problem Statement stated in next section. The contents of the report are: Introduction Contents Problem Statement Setup of VMS Setup of Jenkins MkDocs setup for report Setting Up Pipeline Set Up SuiteCRM Deployment of SuiteCRM SAST Tools","title":"Contents"},{"location":"contents/#table-of-contents","text":"The following is the report/documentation for the Problem Statement stated in next section. The contents of the report are: Introduction Contents Problem Statement Setup of VMS Setup of Jenkins MkDocs setup for report Setting Up Pipeline Set Up SuiteCRM Deployment of SuiteCRM SAST Tools","title":"Table of contents"},{"location":"deployment-of-suitecrm/","text":"Deployment of SuiteCRM Objective This section aims to set up a basic pipeline in Jenkins to provide a solution to the 1st, 2nd, 5th and 6th points of the problem statement under Task 1. Jenkins pipeline project created I set up Jenkins as mentioned in the Setup of Jenkins section. For building a pipeline for Maven project. I clicked on New Item from the main dashboard which leads me to a different page. I gave suitecrm-pipeline as the project's name and chose Pipeline as the project type amongst all the options present. Next came the project configurations page. Here: Under General section: I gave a brief description of the application being deployed and the purpose of this pipeline. I also checked the GitHub Project option and provided the GitHub URL for the project's repository. This option allowed Jenkins to know where to fetch the project from. Under Build Triggers section: I checked the GitHub hook trigger for GITScm Polling option to allow automated builds based on webhook triggers on GitHub for selected events. Under Pipeline section: For Definition, I chose Pipeline Script option and written the pipeline code in the script section. Then, I clicked on save to save the configurations made. Jenkinsfile I have explained about Jenkinsfile in Setting Up Pipeline section. The following are the contents of the Jenkinsfile which executes the pipeline: pipeline { agent any stages { stage('git') { steps { git url: 'https://github.com/Priyam5/SuiteCRM.git/' } } stage ('Build') { steps { sh 'composer install' } } // stage ('Dependency-Check Analysis'){ // steps { // sh 'Dependency-Check' // } // } stage ('Deploying App to production server'){ steps { sh 'echo \"Deploying App to production Server\"' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"rm -rf suitecrm && mkdir suitecrm\"' sh 'scp -r * production@192.168.1.4:~/suitecrm' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"cd suitecrm && sudo cp -r * /home/production/html/suitecrm\"' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"sudo cp -r /home/production/config.php /home/production/html/suitecrm\"' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"cd /home/production/html/suitecrm && sudo chmod -R 755 * && sudo chown -R www-data:www-data *\"' } } } } StrictHostKeyChecking=no In host key checking, ssh automatically maintains and checks a database containing identification for all hosts it has ever been used with. If this property is set to yes, ssh will never automatically add host keys to the $HOME/.ssh/known_hosts file, and refuses to connect to hosts whose host key has changed. This property forces the user to manually add all new hosts. If this property is set to no, ssh will automatically add new host keys to the user known hosts files. The stages of pipeline git : In this stage git repository of SuiteCRM is cloned. Build : In the build stage, application is built and dependencies are installed using composer in the build stage on the Jenkins VM. This loads all the dependencies that the app (SuiteCRM) requires. Deploying App to production server: In this stage, the files are deployed from Jenkins to production VM and also removed the files of suitecrm from production server as it might cause conflict in between the files. Build Stage - Permission denied In the build stage, I was getting an error for permission denied for the folder was not getting deleted and permission denied for regular files not being created. So to solve this I followed this documentation I changed root directory to home directory as the document root was set to /var/www/html. It was configured in the following file: /etc/apache2/sites-enabled/000-default.conf So I run this command to make the changes in the nano file. sudo nano /etc/apache2/sites-enabled/000-default.conf I changed it to /home/production/html/suitecrm Created file suitecrm under /home/production/html Made changes in the last path in Jenkinsfile to /home/production/html/suitecrm Click On Save and then build it was successfully build this time. SuiteCRM Web Page When I opened the webpage http://192.168.1.4/suitecrm/install.php there it showed to set the session.save_path . So I changed it from this session.save_path = \"var/www/html/suitecrm/\" to session.save_path = \"tmp/\" by going in the file: sudo nano /etc/php/7.2/apache2/php.ini This was displayed when I opened the webpage again: Component Status Writeable Custom Directory The Custom Directory exists but is not writeable. You may have to change permissions on it (chmod 766) or right click on it and uncheck the read only option, depending on your Operating System. Please take the needed steps to make the file writeable. Writable Cache Sub-Directories The files or directories listed below are not writeable or are missing and cannot be created. Depending on your Operating System, correcting this may require you to change permissions on the files or parent directory (chmod 755), or to right click on the parent directory and uncheck the \u2018read only\u2019 option and apply it to all subfolders. Please fix the following files or directories before proceeding: /home/bro303/public_html/crm/cache/images /home/bro303/public_html/crm/cache/layout /home/bro303/public_html/crm/cache/pdf /home/bro303/public_html/crm/cache/xml /home/bro303/public_html/crm/cache/include/javascript I ran these commands to set the following recommended permissions on SuiteCRM instance: sudo chown -R , <user name >:< user name > . sudo chmod -R 755 . sudo chmod -R 775 cache custom modules themes data upload config_override.php After this the web page opened for making the configurations of database and Site. Note: I was getting an error of database not connected because every time I build the pipeline, it deletes the older files and creates a new one. So config.php file is missing. So copy the file when SuiteCRM installed manually to another place and also in suitecrm instance. and in the pipeline pass the step to copy the config.php file. After it's successfully done the application will be directly deployed by the pipeline. To open the config page multiple times in config.php file make the change installer_locked = True to false .","title":"Deployment of SuiteCRM"},{"location":"deployment-of-suitecrm/#deployment-of-suitecrm","text":"","title":"Deployment of SuiteCRM"},{"location":"deployment-of-suitecrm/#objective","text":"This section aims to set up a basic pipeline in Jenkins to provide a solution to the 1st, 2nd, 5th and 6th points of the problem statement under Task 1.","title":"Objective"},{"location":"deployment-of-suitecrm/#jenkins-pipeline-project-created","text":"I set up Jenkins as mentioned in the Setup of Jenkins section. For building a pipeline for Maven project. I clicked on New Item from the main dashboard which leads me to a different page. I gave suitecrm-pipeline as the project's name and chose Pipeline as the project type amongst all the options present. Next came the project configurations page. Here: Under General section: I gave a brief description of the application being deployed and the purpose of this pipeline. I also checked the GitHub Project option and provided the GitHub URL for the project's repository. This option allowed Jenkins to know where to fetch the project from. Under Build Triggers section: I checked the GitHub hook trigger for GITScm Polling option to allow automated builds based on webhook triggers on GitHub for selected events. Under Pipeline section: For Definition, I chose Pipeline Script option and written the pipeline code in the script section. Then, I clicked on save to save the configurations made.","title":"Jenkins pipeline project created"},{"location":"deployment-of-suitecrm/#jenkinsfile","text":"I have explained about Jenkinsfile in Setting Up Pipeline section. The following are the contents of the Jenkinsfile which executes the pipeline: pipeline { agent any stages { stage('git') { steps { git url: 'https://github.com/Priyam5/SuiteCRM.git/' } } stage ('Build') { steps { sh 'composer install' } } // stage ('Dependency-Check Analysis'){ // steps { // sh 'Dependency-Check' // } // } stage ('Deploying App to production server'){ steps { sh 'echo \"Deploying App to production Server\"' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"rm -rf suitecrm && mkdir suitecrm\"' sh 'scp -r * production@192.168.1.4:~/suitecrm' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"cd suitecrm && sudo cp -r * /home/production/html/suitecrm\"' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"sudo cp -r /home/production/config.php /home/production/html/suitecrm\"' sh 'ssh -o StrictHostKeyChecking=no production@192.168.1.4 \"cd /home/production/html/suitecrm && sudo chmod -R 755 * && sudo chown -R www-data:www-data *\"' } } } } StrictHostKeyChecking=no In host key checking, ssh automatically maintains and checks a database containing identification for all hosts it has ever been used with. If this property is set to yes, ssh will never automatically add host keys to the $HOME/.ssh/known_hosts file, and refuses to connect to hosts whose host key has changed. This property forces the user to manually add all new hosts. If this property is set to no, ssh will automatically add new host keys to the user known hosts files.","title":"Jenkinsfile"},{"location":"deployment-of-suitecrm/#the-stages-of-pipeline","text":"git : In this stage git repository of SuiteCRM is cloned. Build : In the build stage, application is built and dependencies are installed using composer in the build stage on the Jenkins VM. This loads all the dependencies that the app (SuiteCRM) requires. Deploying App to production server: In this stage, the files are deployed from Jenkins to production VM and also removed the files of suitecrm from production server as it might cause conflict in between the files.","title":"The stages of pipeline"},{"location":"deployment-of-suitecrm/#build-stage-permission-denied","text":"In the build stage, I was getting an error for permission denied for the folder was not getting deleted and permission denied for regular files not being created. So to solve this I followed this documentation I changed root directory to home directory as the document root was set to /var/www/html. It was configured in the following file: /etc/apache2/sites-enabled/000-default.conf So I run this command to make the changes in the nano file. sudo nano /etc/apache2/sites-enabled/000-default.conf I changed it to /home/production/html/suitecrm Created file suitecrm under /home/production/html Made changes in the last path in Jenkinsfile to /home/production/html/suitecrm Click On Save and then build it was successfully build this time.","title":"Build Stage - Permission denied"},{"location":"deployment-of-suitecrm/#suitecrm-web-page","text":"When I opened the webpage http://192.168.1.4/suitecrm/install.php there it showed to set the session.save_path . So I changed it from this session.save_path = \"var/www/html/suitecrm/\" to session.save_path = \"tmp/\" by going in the file: sudo nano /etc/php/7.2/apache2/php.ini This was displayed when I opened the webpage again: Component Status Writeable Custom Directory The Custom Directory exists but is not writeable. You may have to change permissions on it (chmod 766) or right click on it and uncheck the read only option, depending on your Operating System. Please take the needed steps to make the file writeable. Writable Cache Sub-Directories The files or directories listed below are not writeable or are missing and cannot be created. Depending on your Operating System, correcting this may require you to change permissions on the files or parent directory (chmod 755), or to right click on the parent directory and uncheck the \u2018read only\u2019 option and apply it to all subfolders. Please fix the following files or directories before proceeding: /home/bro303/public_html/crm/cache/images /home/bro303/public_html/crm/cache/layout /home/bro303/public_html/crm/cache/pdf /home/bro303/public_html/crm/cache/xml /home/bro303/public_html/crm/cache/include/javascript I ran these commands to set the following recommended permissions on SuiteCRM instance: sudo chown -R , <user name >:< user name > . sudo chmod -R 755 . sudo chmod -R 775 cache custom modules themes data upload config_override.php After this the web page opened for making the configurations of database and Site. Note: I was getting an error of database not connected because every time I build the pipeline, it deletes the older files and creates a new one. So config.php file is missing. So copy the file when SuiteCRM installed manually to another place and also in suitecrm instance. and in the pipeline pass the step to copy the config.php file. After it's successfully done the application will be directly deployed by the pipeline. To open the config page multiple times in config.php file make the change installer_locked = True to false .","title":"SuiteCRM Web Page"},{"location":"mkdocs-setup-usage/","text":"MkDocs setup for Report Objective This section aims to create documentation in Markdown and use MkDocs to deploy the documentation generated as a static site and solve the 3rd point of the problem statement under Task 1. MkDocs is a fast, simple, and static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Installing MkDocs MkDocs can be installed from this link as it is the official site. I only referred to the 'Installing MkDocs' section under 'Manual Installation'. Selecting a Theme MkDocs allows users to use various themes to customize the style and look of the site. I saw the various themes provided from here . I selected the 'Material' theme because I liked the style of the displayed content. To use this theme with MkDocs, it is required to be installed with pip so, I installed Material theme using the command pip install mkdocs-material ' as mentioned in the official documentation. Getting started with Configuration In the terminal: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created in the vs code. A single configuration file named mkdocs.yml, and a folder named docs that will contain documentation source files. The docs folder just contains a single documentation page, named index.md. MkDocs comes with a built-in dev-server to preview the documentation as we work on it. Start the server in the same directory as the mkdocs.yml configuration file, by running the mkdocs serve command: I opened http://127.0.0.1:8000/ in the browser, and saw the default home page is displayed: YAML file mkdocs.yml , is present in the root directory of the project that configures the site structure, site title, pages, themes, etc. It is used to define properties for the site. Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file. My mkdocs.yml is as shown: site_name: <DevSecOps> nav: - Introduction: 'index.md' - Contents: 'contents.md' - Problem Statement: 'problem-statement.md' - Setup of VMs: 'Ubuntu-server-VM-setup.md' - Setup of Jenkins: 'Jenkins-installation.md' - MkDocs setup for report: 'mkdocs-setup-usage.md' theme: material site_name: title of the site nav: To add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting. theme: The theme we are using. Deploying the site on GitHub Made a repository on GitHub internship-appsecco and also checked the option's Initialize this repository with a README and private repository and after that select the option Create repository . Now in the terminal run: git init mkdocs build git add . git commit -m \"demo1\" git push -u origin master I can see that the MkDocs's files are pushed on GitHub. Note: To build the site folder in beginning we will run the below command. mkdocs build --clean Deploying on Netlify from Github I deployed the site on Github because every time I make the changes I just have to push it to GitHub and from there the report will be live. Select the option Add new site on Netlify. Next select option Git it will start showing all repositories. Select the appsecco-internship repository and then in Publish directory column type site/ Click on deploy site . The site will be deployed now and the link will be available on the screen which is used to view our report.","title":"MkDocs setup for report"},{"location":"mkdocs-setup-usage/#mkdocs-setup-for-report","text":"","title":"MkDocs setup for Report"},{"location":"mkdocs-setup-usage/#objective","text":"This section aims to create documentation in Markdown and use MkDocs to deploy the documentation generated as a static site and solve the 3rd point of the problem statement under Task 1. MkDocs is a fast, simple, and static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.","title":"Objective"},{"location":"mkdocs-setup-usage/#installing-mkdocs","text":"MkDocs can be installed from this link as it is the official site. I only referred to the 'Installing MkDocs' section under 'Manual Installation'.","title":"Installing MkDocs"},{"location":"mkdocs-setup-usage/#selecting-a-theme","text":"MkDocs allows users to use various themes to customize the style and look of the site. I saw the various themes provided from here . I selected the 'Material' theme because I liked the style of the displayed content. To use this theme with MkDocs, it is required to be installed with pip so, I installed Material theme using the command pip install mkdocs-material ' as mentioned in the official documentation.","title":"Selecting a Theme"},{"location":"mkdocs-setup-usage/#getting-started-with-configuration","text":"In the terminal: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created in the vs code. A single configuration file named mkdocs.yml, and a folder named docs that will contain documentation source files. The docs folder just contains a single documentation page, named index.md. MkDocs comes with a built-in dev-server to preview the documentation as we work on it. Start the server in the same directory as the mkdocs.yml configuration file, by running the mkdocs serve command: I opened http://127.0.0.1:8000/ in the browser, and saw the default home page is displayed: YAML file mkdocs.yml , is present in the root directory of the project that configures the site structure, site title, pages, themes, etc. It is used to define properties for the site. Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file. My mkdocs.yml is as shown: site_name: <DevSecOps> nav: - Introduction: 'index.md' - Contents: 'contents.md' - Problem Statement: 'problem-statement.md' - Setup of VMs: 'Ubuntu-server-VM-setup.md' - Setup of Jenkins: 'Jenkins-installation.md' - MkDocs setup for report: 'mkdocs-setup-usage.md' theme: material site_name: title of the site nav: To add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting. theme: The theme we are using.","title":"Getting started with Configuration"},{"location":"mkdocs-setup-usage/#deploying-the-site-on-github","text":"Made a repository on GitHub internship-appsecco and also checked the option's Initialize this repository with a README and private repository and after that select the option Create repository . Now in the terminal run: git init mkdocs build git add . git commit -m \"demo1\" git push -u origin master I can see that the MkDocs's files are pushed on GitHub. Note: To build the site folder in beginning we will run the below command. mkdocs build --clean","title":"Deploying the site on GitHub"},{"location":"mkdocs-setup-usage/#deploying-on-netlify-from-github","text":"I deployed the site on Github because every time I make the changes I just have to push it to GitHub and from there the report will be live. Select the option Add new site on Netlify. Next select option Git it will start showing all repositories. Select the appsecco-internship repository and then in Publish directory column type site/ Click on deploy site . The site will be deployed now and the link will be available on the screen which is used to view our report.","title":"Deploying on Netlify from Github"},{"location":"problem-statement/","text":"Problem Statement Task 1 Setup the infrastructure, required for the task, on 2 virtual machines running locally on a laptop. One VM contains the Jenkins and related infrastructure, and the second VM is for deploying the Odoo using the pipeline. Setup the infrastructure, of Jenkins for basic pipeline setup. Do document extensively in markdown and deploy the documentation in a MkDocs website. Setting up the basic pipeline. Next, SuiteCRM should get deployed in a server that is the second VM, I installed. Deployment of SuiteCRM on production server through jenkins pipeline. Identify suitable tools for SuiteCRM to perform SAST and generate a report.","title":"Problem Statement"},{"location":"problem-statement/#problem-statement","text":"","title":"Problem Statement"},{"location":"problem-statement/#task-1","text":"Setup the infrastructure, required for the task, on 2 virtual machines running locally on a laptop. One VM contains the Jenkins and related infrastructure, and the second VM is for deploying the Odoo using the pipeline. Setup the infrastructure, of Jenkins for basic pipeline setup. Do document extensively in markdown and deploy the documentation in a MkDocs website. Setting up the basic pipeline. Next, SuiteCRM should get deployed in a server that is the second VM, I installed. Deployment of SuiteCRM on production server through jenkins pipeline. Identify suitable tools for SuiteCRM to perform SAST and generate a report.","title":"Task 1"},{"location":"sast-tools/","text":"SAST - Dependency-Check Objective This section aims to identify suitable tools for SuiteCRM to perform SAST and generate a report to provide a solution to the 7th point of the problem statement under Task 1. SAST SAST or Static Application Security Testing is a process that analyses a project's source code, dependencies, and related files for known security vulnerabilities. SAST could also help identify segments of the project's logic which might lead to a security vulnerability. OWASP dependency check As mentioned on OWASP Dependency Check's official site , Dependency-Check is a utility that identifies project dependencies and checks if there are any known, publicly disclosed, vulnerabilities. I installed the plugin: Go to Manage Jenkins then Manage Plugins and under Available section search for ' OWASP dependency-check ' and install the plugin. After this go to the Global Tool Configuration and under Dependency-Check installations add the Name OWASP Dependency-Check Plugin . In jenkinsfile add a stage before the build stage: stage ('Dependency-Check Analysis'){ steps { dependencyCheck additionalArguments: '', odcInstallation: 'OWASP Dependency-Check Plugin' } } After this, I got the report in the Console Output after the pipeline is successfully build. Now to get a copy of the report add one more step to jenkinsfile under the Dependency-Check Analysis stage. dependencyCheckPublisher pattern: 'dependency-check-report.xml' This will create a dependency-check-report.xml report file in the workspace and I can also see in Jenkins the Dependency-Check Trend that is a graphical representation of vulnerabilities found in the SuiteCRM application and they are in which category that is critical, high, medium, low or unassigned. Here is the report which generated after OWASP Dependency-Check. Note: I was getting this error [DependencyCheck] Unable to find Dependency-Check reports to parse because I was using the latest version 5 of OWASP Dependency-Check Plugin but writing the code according to the v4. The default path for report search was\"**/dependency-check-report.xml\" in v4 and has changed to \"dependency-check-report.xml\" in v5. Snyk Snyk is an open-source security platform for finding out vulnerabilities in the source code of an application. A platform that helps monitor (open source) projects present on GitHub, Bitbucket, etc. or locally to identify dependencies with known vulnerabilities. It is available as a CLI and as a docker image. Global Configuration Configure your Jenkins settings to install the Snyk Security Scanner plugin: Go to Manage Jenkins > Manage Plugins > Available and search for Snyk Security. Install the plugin.","title":"SAST Tools"},{"location":"sast-tools/#sast-dependency-check","text":"","title":"SAST - Dependency-Check"},{"location":"sast-tools/#objective","text":"This section aims to identify suitable tools for SuiteCRM to perform SAST and generate a report to provide a solution to the 7th point of the problem statement under Task 1.","title":"Objective"},{"location":"sast-tools/#sast","text":"SAST or Static Application Security Testing is a process that analyses a project's source code, dependencies, and related files for known security vulnerabilities. SAST could also help identify segments of the project's logic which might lead to a security vulnerability.","title":"SAST"},{"location":"sast-tools/#owasp-dependency-check","text":"As mentioned on OWASP Dependency Check's official site , Dependency-Check is a utility that identifies project dependencies and checks if there are any known, publicly disclosed, vulnerabilities. I installed the plugin: Go to Manage Jenkins then Manage Plugins and under Available section search for ' OWASP dependency-check ' and install the plugin. After this go to the Global Tool Configuration and under Dependency-Check installations add the Name OWASP Dependency-Check Plugin . In jenkinsfile add a stage before the build stage: stage ('Dependency-Check Analysis'){ steps { dependencyCheck additionalArguments: '', odcInstallation: 'OWASP Dependency-Check Plugin' } } After this, I got the report in the Console Output after the pipeline is successfully build. Now to get a copy of the report add one more step to jenkinsfile under the Dependency-Check Analysis stage. dependencyCheckPublisher pattern: 'dependency-check-report.xml' This will create a dependency-check-report.xml report file in the workspace and I can also see in Jenkins the Dependency-Check Trend that is a graphical representation of vulnerabilities found in the SuiteCRM application and they are in which category that is critical, high, medium, low or unassigned. Here is the report which generated after OWASP Dependency-Check. Note: I was getting this error [DependencyCheck] Unable to find Dependency-Check reports to parse because I was using the latest version 5 of OWASP Dependency-Check Plugin but writing the code according to the v4. The default path for report search was\"**/dependency-check-report.xml\" in v4 and has changed to \"dependency-check-report.xml\" in v5.","title":"OWASP dependency check"},{"location":"sast-tools/#snyk","text":"Snyk is an open-source security platform for finding out vulnerabilities in the source code of an application. A platform that helps monitor (open source) projects present on GitHub, Bitbucket, etc. or locally to identify dependencies with known vulnerabilities. It is available as a CLI and as a docker image.","title":"Snyk"},{"location":"sast-tools/#global-configuration","text":"Configure your Jenkins settings to install the Snyk Security Scanner plugin: Go to Manage Jenkins > Manage Plugins > Available and search for Snyk Security. Install the plugin.","title":"Global Configuration"},{"location":"setting-up-pipeline/","text":"Setting up a pipeline: Objective This section aims to set up a basic pipeline in Jenkins to perform the task and solve the 4th point of the problem statement under Task 1. Why Pipeline? Jenkins is, fundamentally, an automation engine that supports several automation patterns. Pipeline adds a powerful set of automation tools onto Jenkins, supporting use cases that span from simple continuous integration to comprehensive CD pipelines. By modeling a series of related tasks, Pipeline has many features: Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit, review, and iterate upon their delivery pipeline. Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins master. Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run. Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel. Extensible: The Pipeline plugin supports custom extensions to its DSL(Domain Specific Language) and multiple options for integration with other plugins. Jenkins pipeline Project I set up Jenkins as mentioned in the Setup of Jenkins section. For building a pipeline for Maven project I followed these steps and also downloaded Maven in my Jenkins VM for all the repositories related to it are present in the system: Click on the New Item from the main dashboard which leads to a different page. Filled the project name as Jenkins-Maven and choose Maven Project as the project type as it was a Maven based project. Next come's the project configurations page. Here: Under General section: I gave a description of the application being deployed and the purpose of this pipeline. Under the Source Code Management option I checked the Git option and provided the GitHub URL for the project's repository. This option allow's Jenkins to know where to fetch the project from. Under Build Triggers section: I checked the Build whenever a SNAPSHOT dependency is built option to allow automated builds. I clicked on save to save the configurations. Jenkinsfile Jenkinsfile is defined as a utility where the actions that are to be performed on the build can be written in a syntactical format in a file. I followed this article because it is the official documentation from Jenkins and it is easy to understand because it has a simple format with examples. The following are the contents of the Jenkinsfile which executes the pipeline: pipeline { agent any stages { stage ('Compile Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn clean compile' } } } stage ('Testing Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn test' } } } stage ('Deployment Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn deploy' } } } } } The pipeline block constitutes the entire definition of the pipeline. The agent keyword is used to choose the way the Jenkins instance(s) are used to run the pipeline. The any keyword defines that Jenkins should allocate any available agent (an instance of Jenkins/a slave/the master instance) to execute the pipeline. A more thorough explanation can be found here . The stages block houses all the stages that will comprise the various operations to be performed during the execution of the pipeline. The stage block defines the task performed through the Pipeline (e.g. \"Build\", \"Test\" and \"Deploy\" stages) The steps block defines the actions that are to be performed within a particular stage. sh keyword is used to execute shell commands through Jenkins. Lastly, mvn over here stands for maven. Deploying the files to Production VM For deploying our files from the Jenkins VM to production VM, I did the SSH Access configuration. I set up an SSH access configuration for Jenkins to be able to perform operations and copy application files onto the Production VM to allow the Jenkins User to log on to the Production VM without entering for a password again and again. SSH Access Configuration I referred to this document because the way it is explained is simple to understand. Step 1: Create the RSA Key Pair The first step is to create the key pair on the jenkins-infra VM : ssh-keygen -t rsa Step 2: Store the Keys and Passphrase Once I entered the above command, I got a few more questions: Enter file in which to save the key (/home/.ssh/id_rsa): I pressed enter here, saving the file to the mentioned path. Enter passphrase (empty for no passphrase): I pressed enter because if I have given a passphrase, is then having to type it in each time I use the key pair. After this, I got the public key and private key location. Step 3: Copy the Public Key The public key generated above was added to ~/.ssh/authorized_keys on the Production VM. ssh-copy-id jenkins@198.51.100.0 Copying the folder For copying the target folder of Jenkins-Maven Project from Jenkins VM to production VM, it didn't ask for the password this time: scp -r /var/lib/jenkins/workspace/Jenkins-Maven/target production@192.168.1.4:/home/production/target Syntax: scp < source > < destination > In this A is Jenkins VM and B is production VM. To copy a file from B to A while logged into B: scp -r /path/to/file username@a:/path/to/destination To copy a file from B to A while logged into A: scp -r username@b:/path/to/file /path/to/destination","title":"Setting Up Pipeline"},{"location":"setting-up-pipeline/#setting-up-a-pipeline","text":"","title":"Setting up a pipeline:"},{"location":"setting-up-pipeline/#objective","text":"This section aims to set up a basic pipeline in Jenkins to perform the task and solve the 4th point of the problem statement under Task 1.","title":"Objective"},{"location":"setting-up-pipeline/#why-pipeline","text":"Jenkins is, fundamentally, an automation engine that supports several automation patterns. Pipeline adds a powerful set of automation tools onto Jenkins, supporting use cases that span from simple continuous integration to comprehensive CD pipelines. By modeling a series of related tasks, Pipeline has many features: Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit, review, and iterate upon their delivery pipeline. Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins master. Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run. Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel. Extensible: The Pipeline plugin supports custom extensions to its DSL(Domain Specific Language) and multiple options for integration with other plugins.","title":"Why Pipeline?"},{"location":"setting-up-pipeline/#jenkins-pipeline-project","text":"I set up Jenkins as mentioned in the Setup of Jenkins section. For building a pipeline for Maven project I followed these steps and also downloaded Maven in my Jenkins VM for all the repositories related to it are present in the system: Click on the New Item from the main dashboard which leads to a different page. Filled the project name as Jenkins-Maven and choose Maven Project as the project type as it was a Maven based project. Next come's the project configurations page. Here: Under General section: I gave a description of the application being deployed and the purpose of this pipeline. Under the Source Code Management option I checked the Git option and provided the GitHub URL for the project's repository. This option allow's Jenkins to know where to fetch the project from. Under Build Triggers section: I checked the Build whenever a SNAPSHOT dependency is built option to allow automated builds. I clicked on save to save the configurations.","title":"Jenkins pipeline Project"},{"location":"setting-up-pipeline/#jenkinsfile","text":"Jenkinsfile is defined as a utility where the actions that are to be performed on the build can be written in a syntactical format in a file. I followed this article because it is the official documentation from Jenkins and it is easy to understand because it has a simple format with examples. The following are the contents of the Jenkinsfile which executes the pipeline: pipeline { agent any stages { stage ('Compile Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn clean compile' } } } stage ('Testing Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn test' } } } stage ('Deployment Stage') { steps { withMaven(maven : 'maven_3_5_0') { sh 'mvn deploy' } } } } } The pipeline block constitutes the entire definition of the pipeline. The agent keyword is used to choose the way the Jenkins instance(s) are used to run the pipeline. The any keyword defines that Jenkins should allocate any available agent (an instance of Jenkins/a slave/the master instance) to execute the pipeline. A more thorough explanation can be found here . The stages block houses all the stages that will comprise the various operations to be performed during the execution of the pipeline. The stage block defines the task performed through the Pipeline (e.g. \"Build\", \"Test\" and \"Deploy\" stages) The steps block defines the actions that are to be performed within a particular stage. sh keyword is used to execute shell commands through Jenkins. Lastly, mvn over here stands for maven.","title":"Jenkinsfile"},{"location":"setting-up-pipeline/#deploying-the-files-to-production-vm","text":"For deploying our files from the Jenkins VM to production VM, I did the SSH Access configuration. I set up an SSH access configuration for Jenkins to be able to perform operations and copy application files onto the Production VM to allow the Jenkins User to log on to the Production VM without entering for a password again and again.","title":"Deploying the files to Production VM"},{"location":"setting-up-pipeline/#ssh-access-configuration","text":"I referred to this document because the way it is explained is simple to understand. Step 1: Create the RSA Key Pair The first step is to create the key pair on the jenkins-infra VM : ssh-keygen -t rsa Step 2: Store the Keys and Passphrase Once I entered the above command, I got a few more questions: Enter file in which to save the key (/home/.ssh/id_rsa): I pressed enter here, saving the file to the mentioned path. Enter passphrase (empty for no passphrase): I pressed enter because if I have given a passphrase, is then having to type it in each time I use the key pair. After this, I got the public key and private key location. Step 3: Copy the Public Key The public key generated above was added to ~/.ssh/authorized_keys on the Production VM. ssh-copy-id jenkins@198.51.100.0","title":"SSH Access Configuration"},{"location":"setting-up-pipeline/#copying-the-folder","text":"For copying the target folder of Jenkins-Maven Project from Jenkins VM to production VM, it didn't ask for the password this time: scp -r /var/lib/jenkins/workspace/Jenkins-Maven/target production@192.168.1.4:/home/production/target Syntax: scp < source > < destination > In this A is Jenkins VM and B is production VM. To copy a file from B to A while logged into B: scp -r /path/to/file username@a:/path/to/destination To copy a file from B to A while logged into A: scp -r username@b:/path/to/file /path/to/destination","title":"Copying the folder"},{"location":"setting-up-suitecrm/","text":"Setting up SuiteCRM Objective SuiteCRM should get deployed in a server that is the second VM, to perform the task and solve the 5th point of the problem statement under Task 1. SuiteCRM The application that I chose is SuiteCRM . It is a Customer Relationship Management tool which is the open-source forked version of SugarCRM . SuiteCRM adds a few additional features to its fork and is free to use. I chose the application because it is easy to download and deployed faster and it is also an application that is used in the real-world and is not just a dummy application. I checked out the requirements for installing SuiteCRM and made a workflow on how to carry on further tasks. Since SuiteCRM is written in PHP, I had to install a few things on the production VM manually. Install PHP on Ubuntu 18.04 Ubuntu 18.04 has PHP 7.2 in its repositories. I Installed it by running the commands below in terminal: sudo apt-get -y install wget php php-{pear,cgi,common,curl,mbstring,gd,mysql,gettext,bcmath,imap,json,xml,fpm} Install the required software stack for SuiteCRM. This includes the LAMP stack and some additional PHP modules. sudo apt-get install apache2 apache2-utils libapache2-mod-php php php-common php-curl php-xml php-json php- To confirm that the PHP version is installed. php -v Installing MySQL sudo apt install mysql-server sudo mysql_secure_installation Building a database: create database suitecrm; grant all on suitecrm.* to suitecrm@localhost IDENTIFIED by \"StrongPassword\"; flush privileges; quit Installing Apache Web Server For installing Apache server I followed this documentation . The way documentation is written is easy to understand. Step 1 \u2014 Installing Apache sudo apt update sudo apt install apache2 List the ufw application profiles by typing: sudo ufw app list A list of the application profiles: Available applications: Apache Apache Full Apache Secure OpenSSH There are three profiles available for Apache: Apache: This profile opens only port 80 (normal, unencrypted web traffic) Apache Full: This profile opens both port 80 (normal, unencrypted web traffic) and port 443 (TLS/SSL encrypted traffic) Apache Secure: This profile opens only port 443 (TLS/SSL encrypted traffic) Now to check the open ports sudo ufw status Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere 8080 ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) 8080 (v6) ALLOW Anywhere (v6) To allow the Apache port. sudo ufw allow 'Apache' Again check the status to see the open ports. sudo ufw status I can see the following ports open now including Apache. Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere 8080 ALLOW Anywhere Apache ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) 8080 (v6) ALLOW Anywhere (v6) Apache (v6) ALLOW Anywhere (v6) Check with the systemd init system to make sure the service is running by typing: sudo systemctl status apache2 Once check that the Apache is active after that run on the browser http://IP of production VM . I saw the default Ubuntu 18.04 Apache web page on a web browser which indicates it's working properly. Cloning SuiteCRM To clone SuiteCRM from GitHub firstly I fork the SuiteCRM and after that cloned it to my production system. git clone https://github.com/Priyam5/SuiteCRM.git Installing Composer SuiteCRM packages are not built. This is due to I cloned the repository instead of using the zip archive. Hence, I had to install Composer, the package manager for PHP. I followed the official documentation and performed required steps to install Composer globally. After a successful installation, I ran composer install in the project's root directory to build the dependencies for SuiteCRM. php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" php -r \"if (hash_file('sha384', 'composer-setup.php') === '8a6138e2a05a8c28539c9f0fb361159823655d7ad2deecb371b04a83966c61223adc522b0189079e3e9e277cd72b8897') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" php composer-setup.php php -r \"unlink('composer-setup.php');\" To check composer is installed: php composer.phar Error Resolved I copied the files from SuiteCRM directory to location /var/www/html/suitecrm because to run the application SuiteCRM. When I tried running on a browser the URL, I got this error: Composer autoloader not found. please run \"composer install\" In terminal, I ran the composer install and I got the list of issues: Your requirements could not be resolved to an installable set of packages. Problem 1 - The requested PHP extension ext-gd * is missing from your system. Install or enable PHP's gd extension. Problem 2 - The requested PHP extension ext-zip * is missing from your system. Install or enable PHP's zip extension. Problem 3 - The requested PHP extension ext-imap * is missing from your system. Install or enable PHP's imap extension. Problem 4 - Installation request for jeremykendall/php-domain-parser 4.0.3-alpha -> satisfiable by jeremykendall/php-domain-parser[4.0.3-alpha]. - jeremykendall/php-domain-parser 4.0.3-alpha requires ext-intl * -> the requested PHP extension intl is missing from your system. Problem 5 - Installation request for lcobucci/jwt 3.3.2 -> satisfiable by lcobucci/jwt[3.3.2]. - lcobucci/jwt 3.3.2 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 6 - Installation request for league/uri 4.2.3 -> satisfiable by league/uri[4.2.3]. - league/uri 4.2.3 requires ext-intl * -> the requested PHP extension intl is missing from your system. Problem 7 - Installation request for codeception/codeception 3.1.2 -> satisfiable by codeception/codeception[3.1.2]. - codeception/codeception 3.1.2 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 8 - Installation request for facebook/webdriver 1.7.1 -> satisfiable by facebook/webdriver[1.7.1]. - facebook/webdriver 1.7.1 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 9 - Installation request for phpunit/phpunit 5.7.27 -> satisfiable by phpunit/phpunit[5.7.27]. - phpunit/phpunit 5.7.27 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 10 - lcobucci/jwt 3.3.2 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. - league/oauth2-server 5.1.6 requires lcobucci/jwt ^3.1 -> satisfiable by lcobucci/jwt[3.3.2]. - Installation request for league/oauth2-server 5.1.6 -> satisfiable by league/oauth2-server[5.1.6]. In terminal, I run the following commands to sort out the above issues and install the packages mentioned: sudo apt install php-gd sudo apt install zip php-imap sudo apt install php-zip sudo apt-get install php7.2-mbstring sudo apt-get install php7.2-intl I got the next error when I ran again composer install [RuntimeException] /var/www/html/suitecrm/vendor does not exist and could not be created. So I ran the command: sudo php composer.phar install Access SuiteCRM Web Interface I entered on browser http://IP/suitecrm/install.php for accessing the SuiteCRM Web Interface the screen opens like this: Accept the License and press Enter a new page will open. Again there were two issues to resolve them, I went to the location /etc/php/7.2/apache2/php.ini and enter the command sudo nano /etc/php/7.2/apache2/php.ini Made these changes in the nano file: upload_max_filesize = 100M cgi.fix_pathinfo=0 session.save_path = \"var/www/html/suitecrm/\" After this, the System Environment page opened showing, all the system environment parameters. Click next , and then another screen opens, enter the database name, hostname, username, and password. Also, specify the Admin user details on the right side of the screen. I forgot my MySQL password of my database so, I ran this command mentioning the username and password. ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; After filling the entries, click next and the SuiteCRM will start installing. As it completes the SuiteCRM login screen will open.","title":"Set Up SuiteCRM"},{"location":"setting-up-suitecrm/#setting-up-suitecrm","text":"","title":"Setting up SuiteCRM"},{"location":"setting-up-suitecrm/#objective","text":"SuiteCRM should get deployed in a server that is the second VM, to perform the task and solve the 5th point of the problem statement under Task 1.","title":"Objective"},{"location":"setting-up-suitecrm/#suitecrm","text":"The application that I chose is SuiteCRM . It is a Customer Relationship Management tool which is the open-source forked version of SugarCRM . SuiteCRM adds a few additional features to its fork and is free to use. I chose the application because it is easy to download and deployed faster and it is also an application that is used in the real-world and is not just a dummy application. I checked out the requirements for installing SuiteCRM and made a workflow on how to carry on further tasks. Since SuiteCRM is written in PHP, I had to install a few things on the production VM manually.","title":"SuiteCRM"},{"location":"setting-up-suitecrm/#install-php-on-ubuntu-1804","text":"Ubuntu 18.04 has PHP 7.2 in its repositories. I Installed it by running the commands below in terminal: sudo apt-get -y install wget php php-{pear,cgi,common,curl,mbstring,gd,mysql,gettext,bcmath,imap,json,xml,fpm} Install the required software stack for SuiteCRM. This includes the LAMP stack and some additional PHP modules. sudo apt-get install apache2 apache2-utils libapache2-mod-php php php-common php-curl php-xml php-json php- To confirm that the PHP version is installed. php -v","title":"Install PHP on Ubuntu 18.04"},{"location":"setting-up-suitecrm/#installing-mysql","text":"sudo apt install mysql-server sudo mysql_secure_installation Building a database: create database suitecrm; grant all on suitecrm.* to suitecrm@localhost IDENTIFIED by \"StrongPassword\"; flush privileges; quit","title":"Installing MySQL"},{"location":"setting-up-suitecrm/#installing-apache-web-server","text":"For installing Apache server I followed this documentation . The way documentation is written is easy to understand. Step 1 \u2014 Installing Apache sudo apt update sudo apt install apache2 List the ufw application profiles by typing: sudo ufw app list A list of the application profiles: Available applications: Apache Apache Full Apache Secure OpenSSH There are three profiles available for Apache: Apache: This profile opens only port 80 (normal, unencrypted web traffic) Apache Full: This profile opens both port 80 (normal, unencrypted web traffic) and port 443 (TLS/SSL encrypted traffic) Apache Secure: This profile opens only port 443 (TLS/SSL encrypted traffic) Now to check the open ports sudo ufw status Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere 8080 ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) 8080 (v6) ALLOW Anywhere (v6) To allow the Apache port. sudo ufw allow 'Apache' Again check the status to see the open ports. sudo ufw status I can see the following ports open now including Apache. Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere 8080 ALLOW Anywhere Apache ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) 8080 (v6) ALLOW Anywhere (v6) Apache (v6) ALLOW Anywhere (v6) Check with the systemd init system to make sure the service is running by typing: sudo systemctl status apache2 Once check that the Apache is active after that run on the browser http://IP of production VM . I saw the default Ubuntu 18.04 Apache web page on a web browser which indicates it's working properly.","title":"Installing Apache Web Server"},{"location":"setting-up-suitecrm/#cloning-suitecrm","text":"To clone SuiteCRM from GitHub firstly I fork the SuiteCRM and after that cloned it to my production system. git clone https://github.com/Priyam5/SuiteCRM.git","title":"Cloning  SuiteCRM"},{"location":"setting-up-suitecrm/#installing-composer","text":"SuiteCRM packages are not built. This is due to I cloned the repository instead of using the zip archive. Hence, I had to install Composer, the package manager for PHP. I followed the official documentation and performed required steps to install Composer globally. After a successful installation, I ran composer install in the project's root directory to build the dependencies for SuiteCRM. php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" php -r \"if (hash_file('sha384', 'composer-setup.php') === '8a6138e2a05a8c28539c9f0fb361159823655d7ad2deecb371b04a83966c61223adc522b0189079e3e9e277cd72b8897') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" php composer-setup.php php -r \"unlink('composer-setup.php');\" To check composer is installed: php composer.phar","title":"Installing Composer"},{"location":"setting-up-suitecrm/#error-resolved","text":"I copied the files from SuiteCRM directory to location /var/www/html/suitecrm because to run the application SuiteCRM. When I tried running on a browser the URL, I got this error: Composer autoloader not found. please run \"composer install\" In terminal, I ran the composer install and I got the list of issues: Your requirements could not be resolved to an installable set of packages. Problem 1 - The requested PHP extension ext-gd * is missing from your system. Install or enable PHP's gd extension. Problem 2 - The requested PHP extension ext-zip * is missing from your system. Install or enable PHP's zip extension. Problem 3 - The requested PHP extension ext-imap * is missing from your system. Install or enable PHP's imap extension. Problem 4 - Installation request for jeremykendall/php-domain-parser 4.0.3-alpha -> satisfiable by jeremykendall/php-domain-parser[4.0.3-alpha]. - jeremykendall/php-domain-parser 4.0.3-alpha requires ext-intl * -> the requested PHP extension intl is missing from your system. Problem 5 - Installation request for lcobucci/jwt 3.3.2 -> satisfiable by lcobucci/jwt[3.3.2]. - lcobucci/jwt 3.3.2 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 6 - Installation request for league/uri 4.2.3 -> satisfiable by league/uri[4.2.3]. - league/uri 4.2.3 requires ext-intl * -> the requested PHP extension intl is missing from your system. Problem 7 - Installation request for codeception/codeception 3.1.2 -> satisfiable by codeception/codeception[3.1.2]. - codeception/codeception 3.1.2 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 8 - Installation request for facebook/webdriver 1.7.1 -> satisfiable by facebook/webdriver[1.7.1]. - facebook/webdriver 1.7.1 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 9 - Installation request for phpunit/phpunit 5.7.27 -> satisfiable by phpunit/phpunit[5.7.27]. - phpunit/phpunit 5.7.27 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. Problem 10 - lcobucci/jwt 3.3.2 requires ext-mbstring * -> the requested PHP extension mbstring is missing from your system. - league/oauth2-server 5.1.6 requires lcobucci/jwt ^3.1 -> satisfiable by lcobucci/jwt[3.3.2]. - Installation request for league/oauth2-server 5.1.6 -> satisfiable by league/oauth2-server[5.1.6]. In terminal, I run the following commands to sort out the above issues and install the packages mentioned: sudo apt install php-gd sudo apt install zip php-imap sudo apt install php-zip sudo apt-get install php7.2-mbstring sudo apt-get install php7.2-intl I got the next error when I ran again composer install [RuntimeException] /var/www/html/suitecrm/vendor does not exist and could not be created. So I ran the command: sudo php composer.phar install","title":"Error Resolved"},{"location":"setting-up-suitecrm/#access-suitecrm-web-interface","text":"I entered on browser http://IP/suitecrm/install.php for accessing the SuiteCRM Web Interface the screen opens like this: Accept the License and press Enter a new page will open. Again there were two issues to resolve them, I went to the location /etc/php/7.2/apache2/php.ini and enter the command sudo nano /etc/php/7.2/apache2/php.ini Made these changes in the nano file: upload_max_filesize = 100M cgi.fix_pathinfo=0 session.save_path = \"var/www/html/suitecrm/\" After this, the System Environment page opened showing, all the system environment parameters. Click next , and then another screen opens, enter the database name, hostname, username, and password. Also, specify the Admin user details on the right side of the screen. I forgot my MySQL password of my database so, I ran this command mentioning the username and password. ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; After filling the entries, click next and the SuiteCRM will start installing. As it completes the SuiteCRM login screen will open.","title":"Access SuiteCRM Web Interface"}]}